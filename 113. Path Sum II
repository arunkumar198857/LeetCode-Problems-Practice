/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
    
        List<List<Integer>> result = new ArrayList<>();
        if(root == null)
            return result;
        
        ArrayList<Integer> current_list = new ArrayList<>();
        checkPaths(root, result, sum, current_list);
        return result;
    }
    
    public void checkPaths(TreeNode root, List<List<Integer>> result, int sum, ArrayList<Integer> current_list){
        
        if(root == null)
            return;
        
        current_list.add(root.val);
        if(root.left == null && root.right == null && root.val == sum){
            result.add(new ArrayList<Integer>(current_list));
        }
        else{
            checkPaths(root.left, result, sum - root.val, current_list);
            checkPaths(root.right, result, sum - root.val, current_list);   
        }
        current_list.remove(current_list.size() - 1);
        return;
    }
}
