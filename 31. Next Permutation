class Solution {
    public void nextPermutation(int[] nums) {
        
        if(nums == null || nums.length < 1)
            return;
        
        int pivot = findPivot(nums) - 1;
        if(pivot != -1){
            int maxSuccessor = maxSuccessorToPivot(nums, nums[pivot]);
            swap(nums, pivot, maxSuccessor);
        }
        reverseAfterPivot(nums, pivot+1);
        
    }
    
    public int findPivot(int[] nums){
        for(int i = nums.length - 1; i > 0; i--){
            if(nums[i-1] < nums[i])
                return i;
        }
        return 0;
    }
    
    public int maxSuccessorToPivot(int[] nums, int pivotElement){
        for(int i = nums.length - 1; i >= 0; i--){
            if(nums[i] > pivotElement)
                return i;
        }
        return -1;
    }
    
    public void swap(int[] nums, int i, int j){
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
    
    public void reverseAfterPivot(int[] nums, int start){
        int end = nums.length - 1;
        while(start < end)
            swap(nums, start++, end--);
    }
}
