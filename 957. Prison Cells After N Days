class Solution {
    public int[] prisonAfterNDays(int[] cells, int N) {
        if(cells == null || cells.length < 0 || N < 1)
            return cells;
        
        int day = 0;
        boolean cycle = false;
        
        HashSet<String> set = new HashSet<>();
        int dayOfRepeatation = 0, resultingCell = 0;
        
        while(day < N){
            
            int[] next_day = nextDay(cells);
            String key = Arrays.toString(next_day);
            
            if(!set.contains(key)){
                set.add(key);
                day++;
            }
            else{
                cycle = true;
                break;
            }
            cells = next_day.clone();
        }
        
        if(cycle){
            N = N % day;
            for(int i = 0; i < N; i++)
                cells = nextDay(cells);
        }
        
        return cells;
    }
    
    public int[] nextDay(int[] currentDay){
        int[] temp = new int[currentDay.length];
        for(int i = 1; i < currentDay.length - 1; i++)
            temp[i] = currentDay[i-1] == currentDay[i+1] ? 1 : 0;
        return temp;
    }
}
