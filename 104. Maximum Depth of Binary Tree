/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int maxDepth(TreeNode root) {
        if(root == null)
            return 0;
        //One liner recursive solution
        //return 1 + Math.max(maxDepth(root.left) , maxDepth(root.right));
        
        Queue<TreeNode> q = new LinkedList<>();
        TreeNode temp = root;
        int max_depth = 0;
        q.add(root);
        
        while(!q.isEmpty()){
            int size = q.size();
            
            for(int i = 0; i < size; i++){
                TreeNode cur = q.poll();
                if(cur.left != null)    q.add(cur.left);
                if(cur.right != null)   q.add(cur.right);
            }
            max_depth++;
        }
        return max_depth;
    }
}
