/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        
        if(p == null && q == null)  return true;
        if(!check(p,q)) return false;
        
        Queue<TreeNode> q1 = new LinkedList<>();
        Queue<TreeNode> q2 = new LinkedList<>();
        q1.add(p);
        q2.add(q);
        
        while(!q1.isEmpty()){
            
            TreeNode t1 = q1.poll();
            TreeNode t2 = q2.poll();
            
            if(!check(t1,t2))   return false;
            
            if(t1 != null){
                if(!check(t1.left, t2.left))    return false;
                if(t1.left != null){
                    q1.add(t1.left);
                    q2.add(t2.left);
                }
                
                if(!check(t1.right, t2.right))  return false;
                if(t1.right != null){
                    q1.add(t1.right);
                    q2.add(t2.right);
                }
            }
        }   
        return true;
    }
    
    public boolean check(TreeNode p, TreeNode q){
        if(p == null && q == null)  return true;
        if(p == null || q == null)  return false;
        if(p.val != q.val)  return false;
        return true;
    }
}
