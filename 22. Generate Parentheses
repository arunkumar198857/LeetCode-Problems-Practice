//Mine
class Solution {
    public List<String> generateParenthesis(int n) {
        
        List<String> result = new ArrayList<>();
        if(n == 0)
            return result;
        
        generateCombinations(result, n, "", "(");
        return result;
    }
    
    public void generateCombinations(List<String> result, int n, String current, String para){
        
        if(current.length() == 2 * n)
        {
            if(validParantheses(current) && !(result.contains(current)))
                result.add(current);
            return;
        }
        
        current += para;
        generateCombinations(result, n, current, "(");
        generateCombinations(result, n, current, ")");
        return;
    }
    
    public boolean validParantheses(String s){
        
        if(s.length() %2 != 0)
            return false;
        
        Stack<String> stack = new Stack<>();
        for(int i=0; i < s.length(); i++){
            if(s.charAt(i) == '(')
                stack.push("(");
            else{
                String temp = stack.empty()? "#" : stack.pop();
                if(temp != "(")
                    return false;
            }
        }
        return stack.empty();
    }
}







//Optimized

 public List<String> generateParenthesis(int n) {
        List<String> list = new ArrayList<String>();
        backtrack(list, "", 0, 0, n);
        return list;
    }
    
    public void backtrack(List<String> list, String str, int open, int close, int max){
        
        if(str.length() == max*2){
            list.add(str);
            return;
        }
        
        if(open < max)
            backtrack(list, str+"(", open+1, close, max);
        if(close < open)
            backtrack(list, str+")", open, close+1, max);
    }
