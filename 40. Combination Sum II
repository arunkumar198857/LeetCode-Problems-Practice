class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        
        List<List<Integer>> result = new ArrayList<>();        
        if(candidates == null || candidates.length < 1)
            return result;
        
        Arrays.sort(candidates);
        List<Integer> combination = new ArrayList<>();
        findCombinations(result, combination, candidates, target, 0);
        return result;   
    }
    
    public void findCombinations(List<List<Integer>> result, List<Integer> combination,
                                 int[] candidates, int target, int index){
        if(target < 0)
            return;
        
        else if(target == 0){
            result.add(new ArrayList<Integer>(combination));
            return;
        }
        
        for(int i = index; i < candidates.length ; i++){
            if(candidates[i] > target){
                break;
            }
            if(i > index && candidates[i] == candidates[i-1]) continue; // skip duplicates
            combination.add(candidates[i]);
            findCombinations(result, combination, candidates, target - candidates[i], i+1);
            combination.remove(combination.size()-1);
        }
            
    }
}
