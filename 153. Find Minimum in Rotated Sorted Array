class Solution {
    public int findMin(int[] nums) {
        if(nums == null)
            return 0;
        if(nums.length == 1)
            return nums[0];
        
        boolean pivotFound = false;
        int i = 0;
        for(i = nums.length - 1; i >= 1; i--){
            if(nums[i-1] > nums[i]){
                pivotFound = true;
                break;
            }
        }
        if(!pivotFound)
            return nums[0];
        return nums[i];
    }
}

2. Optimal

class Solution {
    public int findMin(int[] nums) {
        if(nums == null)
            return 0;
        if(nums.length == 1)
            return nums[0];
        if(nums[nums.length - 1] > nums[0])
            return nums[0];
        
        int low = 0, high = nums.length - 1;
        while(low <= high){
            int mid = low + (high - low)/2;
            if (nums[mid] > nums[mid + 1])
                return nums[mid + 1];
            if (nums[mid - 1] > nums[mid])
                return nums[mid];
            if(nums[mid] > nums[0])
                low = mid + 1;
            else
                high = mid - 1;
        }
        return 0;
    }
}
