public class Solution {
    public boolean hasCycle(ListNode head) {
        if(head == null || head.next == null)
            return false;
        
        HashSet<ListNode> seen = new HashSet<>();
        while(head != null){
            if(!seen.contains(head)){
                seen.add(head);
                head = head.next;
            }
            else
                return true;
        }
        return false;
    }
}

2. Optimal

public class Solution {
    public boolean hasCycle(ListNode head) {
        if(head == null || head.next == null)
            return false;
        
        ListNode slow = head;
        ListNode fast = head;
        while(fast != null && fast.next != null){
            slow = slow.next;
            fast = fast.next.next;
            
            if(slow == fast)
                return true;
        }
        return false;
    }
}
