/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        
        if(root == null)    return 0;
        
        Queue<TreeNode> queue = new LinkedList<>();
        Queue<Integer> indexQueue = new LinkedList<>();
        int maxWidth = 0;
        queue.add(root);
        indexQueue.add(1);
        
        while(!queue.isEmpty()){
            
            int start = 0, end = 0;
            int size = queue.size();
            
            for(int i = 0; i < size; i++){
                
                TreeNode temp = queue.poll();
                int index = indexQueue.poll();
                
                if(i == 0) start = index;
                if(i == size - 1)   end = index;
                
                if(temp.left != null){
                    queue.add(temp.left);
                    indexQueue.add(2 * index);
                }
                if(temp.right != null){
                    queue.add(temp.right);
                    indexQueue.add(2 * index + 1);
                }
            }
            maxWidth = Math.max(maxWidth, end-start+1);
        }
        return maxWidth;
    }
}
