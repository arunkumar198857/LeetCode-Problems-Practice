/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}
    
    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/

class Solution {
    public Node connect(Node root) {
        
        if(root == null)
            return root;
        
        Queue<Node> queue = new LinkedList<>();
        queue.add(root);
        //root.next = null;
        Node neighbor = new Node();
        
        while(!queue.isEmpty()){
            int size = queue.size();
            neighbor = null;
            
            for(int i = 1; i <= size; i++){  
                
                Node temp = queue.poll();
                
                if(i == size)
                    temp.next = null;
                
                if(temp.left != null)
                    queue.add(temp.left);
                
                if(temp.right != null)
                    queue.add(temp.right);
                
                if(temp.right != null && temp.left != null)
                       temp.left.next = temp.right;
                
                if(temp.left != null && neighbor != null && neighbor.right != null)
                    neighbor.right.next = temp.left;
                
                
                neighbor = temp;
            } 
        }
        return root;
    }
}
