class Solution {
    public List<Integer> findSubstring(String s, String[] words) {
        
         if(s == null || words == null || s.length() < 1 || words.length < 1)
            return new ArrayList<>();
        
        Map<String, Integer> counts = new HashMap<>();
        for(String word : words)
            counts.put(word, counts.getOrDefault(word, 0)+1);
        
        
        List<Integer> result = new ArrayList<>();
        int strLen = s.length(), numWords = words.length, wordLen = words[0].length();
        
        for(int i = 0; i < strLen - (numWords * wordLen) + 1; i++){
            
            Map<String, Integer> seen = new HashMap<>();
            int currentWordIndex = 0;
            while(currentWordIndex < numWords){
                
                String subStr = s.substring(i + currentWordIndex * wordLen, i + (currentWordIndex + 1) * wordLen);
                if(counts.containsKey(subStr)){
                    seen.put(subStr, seen.getOrDefault(subStr, 0) + 1);
                    if(seen.get(subStr) > counts.getOrDefault(subStr, 0))
                        break;
                }
                else
                    break;
                
                currentWordIndex++;
            }
            if(currentWordIndex == numWords)
                result.add(i);
        }
        return result;
    }
}
